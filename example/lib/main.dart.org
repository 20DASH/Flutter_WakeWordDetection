import 'package:flutter/material.dart';
import 'dart:async';
import 'dart:io'; // Added this import
import 'package:flutter/services.dart';
import 'package:flutter_wake_word/flutter_wake_word.dart';
import 'package:flutter_wake_word/use_model.dart';
import 'package:flutter_wake_word/instance_config.dart';
import 'package:permission_handler/permission_handler.dart';

class WakeWordApp extends StatefulWidget {
  @override
  _WakeWordAppState createState() => _WakeWordAppState();
}

class _WakeWordAppState extends State<WakeWordApp> {
  String message = "Listening to WakeWord...";
  bool isFlashing = false;
final List<InstanceConfig> instanceConfigs = [
  InstanceConfig(
    id: 'need_help_now',
    modelName: 'need_help_now.onnx',
    threshold: 0.9999,
    bufferCnt: 3,
    sticky: false,
    ),
  ];

  Future<void> initializeKeywordDetection(List<InstanceConfig> configs) async {
    try {
      final useModel = UseModel();

      print("After requestAudioPermissions:");

      print("useModel == : $useModel");
      await useModel.setKeywordDetectionLicense(
        "MTczNDIxMzYwMDAwMA==-tNV5HJ3NTRQCs5IpOe0imza+2PgPCJLRdzBJmMoJvok=",
      );
      print("After useModel.setKeywordDetectionLicense:");

      await useModel.loadModel(configs, onWakeWordDetected);
      print("After useModel.loadModel:");

    } catch (e) {
      print("Error initializing keyword detection: $e");
    }
  }

  Future<void> openSettings() async {
    if (await Permission.microphone.isPermanentlyDenied) {
      print('Microphone permission permanently denied.');
      // Open settings
      await openAppSettings();
    }
    else
      print('Microphone permission??????????.');
  }

  Future<void> requestAudioPermissions() async {
    var status = await Permission.microphone.status;

    if (status.isDenied) {
      // Request permission
      status = await Permission.microphone.request();
    }

    if (status.isGranted) {
      print('Microphone permission granted.');
    } else {
      print('Microphone permission denied.');
      openSettings();
    }
    if (Platform.isAndroid) {
      var foregroundServicePermission =
          await Permission.systemAlertWindow.request();
      if (!foregroundServicePermission.isGranted) {
        foregroundServicePermission = await Permission.systemAlertWindow.request();
      }
    }
  }

  @override
  void initState() {
    super.initState();
    requestAudioPermissions();
  }

  void onWakeWordDetected(String wakeWord) {
    print("onWakeWordDetected(): $wakeWord");
    print("onWakeWordDetected(): $wakeWord");
    print("onWakeWordDetected(): $wakeWord");
    print("onWakeWordDetected(): $wakeWord");

    message = "WakeWord '$wakeWord' DETECTED";
    setState(() {
      message = "WakeWord '$wakeWord' DETECTED";
      isFlashing = true;
    });

    Future.delayed(Duration(seconds: 5), () {
      setState(() {
        message = "Listening to WakeWord...";
        isFlashing = false;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    final isDarkMode = MediaQuery.of(context).platformBrightness == Brightness.dark;
    final backgroundColor = isFlashing
        ? (isDarkMode ? Colors.red[400] : Colors.red[100])
        : (isDarkMode ? Colors.black : Colors.white);

    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: isDarkMode
                ? [Colors.grey[800]!, Colors.grey[900]!]
                : [Colors.blue[50]!, Colors.blue[100]!],
          ),
        ),
        child: Center(
          child: Container(
            color: backgroundColor,
            padding: const EdgeInsets.all(16.0),
            child: Text(
              message,
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: isDarkMode ? Colors.white : Colors.black,
              ),
              textAlign: TextAlign.center,
            ),
          ),
        ),
      ),
    );
  }


@override
void initState() {
  super.initState();
  requestMicrophonePermission();
}

Future<void> requestMicrophonePermission() async {
  var status = await Permission.microphone.status;
  if (status.isDenied) {
    status = await Permission.microphone.request();
  }

  if (status.isGranted) {
    print('Microphone permission granted.');
    if (Platform.isAndroid) {
      var foregroundServicePermission =
          await Permission.systemAlertWindow.request();
      if (!foregroundServicePermission.isGranted) {
        foregroundServicePermission = await Permission.systemAlertWindow.request();
      }
    }
    // Now that we have permission, load the model
    initializeKeywordDetection(instanceConfigs);
  } else if (status.isPermanentlyDenied) {
    // Instruct user to open settings manually if needed
    await openAppSettings();
    // After user returns from settings, you might re-check permission here
  } else {
    print('Microphone permission denied without permanent denial.');
  }
}

void main() {
  runApp(MaterialApp(
    home: WakeWordApp(),
  ));
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  String _platformVersion = 'Unknown';
  final _flutterWakeWordPlugin = FlutterWakeWord();

  @override
  void initState() {
    super.initState();
    initPlatformState();
    requestMicrophonePermission();
  }

  // Platform messages are asynchronous, so we initialize in an async method.
  Future<void> initPlatformState() async {
    String platformVersion;
    // Platform messages may fail, so we use a try/catch PlatformException.
    // We also handle the message potentially returning null.
    try {
      platformVersion =
          await _flutterWakeWordPlugin.getPlatformVersion() ?? 'Unknown platform version';
    } on PlatformException {
      platformVersion = 'Failed to get platform version.';
    }

    // If the widget was removed from the tree while the asynchronous platform
    // message was in flight, we want to discard the reply rather than calling
    // setState to update our non-existent appearance.
    if (!mounted) return;

    setState(() {
      _platformVersion = platformVersion;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Plugin example app'),
        ),
        body: Center(
          child: Text('Running on: $_platformVersion\n'),
        ),
      ),
    );
  }
}
